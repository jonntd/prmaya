/*
SOURCE
https://github.com/parzival-roethlein/prmaya

DESCRIPTION
in ../prmaya/scripts/prDeformPaint.py

BRUSH CODE SUMMARY
- setValueCommand only gathers the deformation data (vertexIds and weights)
- duringStrokeCmd does the deformation (to be able to batch process multiple
  vertices at once. To increase performance, but also results in more
  predictable deformation because all vertices move from the same (pre-stroke)
  base position)
- finalizeCmd does the deformation if there was no duringStrokeCmd evaluation
  between setValueCommand and finalizeCmd. That happens when:
  - Brush Flood
  - mouse press->release (without drag)

MAYA DEBUG
- setValueCommand triggers when "mouse down -> mouse up" or for every ~6 pixels
  moved while dragging
- BUG: setValueCommand does not trigger when: "mouse down -> moving one pixel ->
  mouse up"
- duringStrokeCmd usually triggers for every pixel moved during drag (except
  when maya is lagging because of calculations)

PERFORMANCE TEST
(flooding 4.3k vertices with edit blendshape target 0.5)

@home
4.3k verts affected:
- prPy=  4 (3 undo, 3 redo)
- dpk = 44 (3 undo, 2 redo)

@work
132 verts (skip non zero deltas):
- prPy=  3 (0.5 undo, 0.5 redo)
- dpk = 12 (15 undo, 3 redo)
4.3k verts:
- prPy=  18 (16 undo, 16 redo)
- dpk = 120 (20 undo, 4 redo)

om.MItMeshVertex.setPosition() is by far the slowest operation, it takes 1 sec
- for every ~270 vertices @work,
- for every ~1000 vertices @home
*/

// from Ui
global int $prDP_operation;
global int $prDP_space;
global float $prDP_minDeltaLength = 0.00001;
global string $prDP_driver;
// for every stroke
global string $prDP_driven = "";
global float $prDP_deltaMultiplier = 1.0;
// for every evaluation
global int $prDP_vertexIds[];
global float $prDP_vertexWeights[];


global proc prDeformPaint_initialize(){
    /*start the brush*/
	ScriptPaintTool;
	artUserPaintCtx -e -toolSetupCmd "prDP_toolSetupCmd" `currentCtx`;
}

global proc prDP_toolSetupCmd(string $toolContextName){
    /*is called just after the Paint Scripts Tool is selected
    initialize all the other commands in this scriptable paint tool context.*/
    artUserPaintCtx -e
        -toolCleanupCmd ""

        -getSurfaceCommand ""
        -getArrayAttrCommand ""

        -initializeCmd "prDP_initializeCmd"
        -finalizeCmd "prDP_finalizeCmd"
        -setValueCommand "prDP_setValueCmd"
        -getValueCommand ""

        -chunkCommand ""
        -duringStrokeCmd "prDP_duringStrokeCmd"
        $toolContextName;
}

global proc string prDP_duringStrokeCmd(){
    /* is called for every pixel of stroke dragging motion */
    prDP_deformation();
    return true;
}

global proc string prDP_initializeCmd(string $name){
    /* is called once for every selected surface when an initial click is
    received */
    global string $prDP_driver;
    if(!`objExists $prDP_driver`)
        error("object does not exist: \""+$prDP_driver+"\"");
    global string $prDP_driven;
    $prDP_driven = $name;
    global float $prDP_deltaMultiplier;
    $prDP_deltaMultiplier = python("prDeformPaint.getEditBlendshapeMultiplier('"+$prDP_driven+"')");
    return "";
}

global proc prDP_finalizeCmd(int $surfaceID){
    /* is called at the end of the stroke */
    prDP_deformation();
    global string $prDP_driven;
    $prDP_driven = "";
    global float $prDP_deltaMultiplier;
    $prDP_deltaMultiplier = 1.0;
}

global proc prDP_setValueCmd(int $slot, int $vertexId, float $vertexWeight){
    /* is called every time a value on the surface is changed */
    global int $prDP_vertexIds[];
    global float $prDP_vertexWeights[];
    int $vertexIdSize = size($prDP_vertexIds);
    // sometimes setValueCmd gets called multiple times for the same vertex,
    // between duringStrokeCmd evaluations. in that case only the highest weight
    // will get used. in my test with 4.3k vertices this did not cost performance
    for($i=0; $i<$vertexIdSize; ++$i){
        if($vertexId == $prDP_vertexIds[$i]){
            if($vertexWeight > $prDP_vertexWeights[$i])
                $prDP_vertexWeights[$i] = $vertexWeight;
            return;
        }
    }
    $prDP_vertexIds[$vertexIdSize] = $vertexId;
    $prDP_vertexWeights[$vertexIdSize] = $vertexWeight;
}

global proc prDP_deformation(){
    /*builds and calls the deformation command*/
    global int $prDP_vertexIds[];
    int $vertexIdSize = size($prDP_vertexIds);
    if($vertexIdSize == 0)
        return;
    global float $prDP_vertexWeights[];

    global int $prDP_operation;
    global int $prDP_space;
    global float $prDP_minDeltaLength;
    global string $prDP_driver;

    global float $prDP_deltaMultiplier;
    global string $prDP_driven;


    if($prDP_operation == 0){
        python("prDeformPaint.averageDeltas('"+$prDP_driver+"', '"+$prDP_driven+"', "+$prDP_minDeltaLength+", ["+intArrayToString($prDP_vertexIds, ", ")+"], ["+floatArrayToString($prDP_vertexWeights, ", ")+"], "+$prDP_deltaMultiplier+", "+$prDP_space+")");
    }else if($prDP_operation == 1){
        python("prDeformPaint.copyPosition('"+$prDP_driver+"', '"+$prDP_driven+"', "+$prDP_minDeltaLength+", ["+intArrayToString($prDP_vertexIds, ", ")+"], ["+floatArrayToString($prDP_vertexWeights, ", ")+"], "+$prDP_deltaMultiplier+", "+$prDP_space+")");
    }else if($prDP_operation == 2){
        python("prDeformPaint.closestPointOrVertex('"+$prDP_driver+"', '"+$prDP_driven+"', "+$prDP_minDeltaLength+", ["+intArrayToString($prDP_vertexIds, ", ")+"], ["+floatArrayToString($prDP_vertexWeights, ", ")+"], "+$prDP_deltaMultiplier+", "+$prDP_space+")");
    }else if($prDP_operation == 3){
        python("prDeformPaint.closestPointOrVertex('"+$prDP_driver+"', '"+$prDP_driven+"', "+$prDP_minDeltaLength+", ["+intArrayToString($prDP_vertexIds, ", ")+"], ["+floatArrayToString($prDP_vertexWeights, ", ")+"], "+$prDP_deltaMultiplier+", "+$prDP_space+", True)");
    }
    clear($prDP_vertexIds);
    clear($prDP_vertexWeights);
}
